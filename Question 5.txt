class Integrate:
	def solve(self,order,coeffs,a,b,n,method):
		def f(x):
			sum=0
			for i in range(order+1):
				sum+=(coeffs[i]*(x**(order-i)))
			return sum
		if method=='trapezoid':
			def TrapezoidalRule(f,a,b,n):
                            h = float(b - a) / n
                            s = 0.0
                            s += f(a)/2.0
                            for i in range(1, n):
                                s += f(a + i*h)
                            s += f(b)/2.0
                            return s * h 
			return TrapezoidalRule(f,a,b,n)
		elif method=='simpson':
                        def SimpsonRule(f,a,b,n): 
                            h=(b-a)/n
                            k=0.0
                            x=a + h
                            for i in range(1,n/2 + 1):
                                k += 4*f(x)  
                                x += 2*h
                            x = a + 2*h
                            for i in range(1,n/2):
                                k += 2*f(x)
                                x += 2*h
                            return (h/3)*(f(a)+f(b)+k)
			return SimpsonRule(f,a,b,n)